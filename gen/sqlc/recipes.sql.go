// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipes.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRecipe = `-- name: CreateRecipe :exec
INSERT INTO recipes (
    recipe_id, 
    title, 
    content, 
    updated_at
)
    VALUES ($1, $2, $3, $4)
`

type CreateRecipeParams struct {
	RecipeID  uuid.UUID
	Title     string
	Content   string
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) error {
	_, err := q.db.Exec(ctx, createRecipe,
		arg.RecipeID,
		arg.Title,
		arg.Content,
		arg.UpdatedAt,
	)
	return err
}

const deleteRecipeById = `-- name: DeleteRecipeById :exec
DELETE FROM recipes 
    WHERE recipe_id = $1
`

func (q *Queries) DeleteRecipeById(ctx context.Context, recipeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRecipeById, recipeID)
	return err
}

const getRecipeById = `-- name: GetRecipeById :one
SELECT recipe_id, title, content, created_at, updated_at FROM recipes
    WHERE recipe_id = $1 LIMIT 1
`

func (q *Queries) GetRecipeById(ctx context.Context, recipeID uuid.UUID) (Recipe, error) {
	row := q.db.QueryRow(ctx, getRecipeById, recipeID)
	var i Recipe
	err := row.Scan(
		&i.RecipeID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRecipeById = `-- name: UpdateRecipeById :exec
UPDATE recipes
    SET title = $2, content = $3
    WHERE recipe_id = $1
`

type UpdateRecipeByIdParams struct {
	RecipeID uuid.UUID
	Title    string
	Content  string
}

func (q *Queries) UpdateRecipeById(ctx context.Context, arg UpdateRecipeByIdParams) error {
	_, err := q.db.Exec(ctx, updateRecipeById, arg.RecipeID, arg.Title, arg.Content)
	return err
}
